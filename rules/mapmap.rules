# vim: syntax=python tabstop=4 expandtab
# coding: utf-8

rule mapmap_index_ibf_update:
    input:
        old_filter="{prefix}.{indexer}_{meth}_{num_bins}.filter",
        symbolic="{prefix}_{meth}_{num_bins}_up/ref_up_{num_bins}"
    output:
        "{prefix}.mapmap_{meth}_{num_bins}_up.filter"
    wildcard_constraints:
        num_bins="\d+."
    params:
        num_threads=config["num_threads"],
        idir="{prefix}_{meth}_{num_bins}_up/"
    log:
        "{prefix}.mapmap_{meth}_{num_bins}.ibf_up.log",
    shell:
        "cp {input.old_filter} {output}; "
#        "command time -f 'RES:%e\\t%M\\t%P' "
        "./bin/dream_yara_update_filter  --threads {params.num_threads} {output} {params.idir}*.fasta 2> {log};"

rule mapmap_index_fm_update:
    input:
        "{prefix}_{meth}_{num_bins}_up/ref_up_{num_bins}"
    output:
        log="{prefix}.mapmap_{meth}_{num_bins}.index_up.log",
#        odir="{prefix}.mapmap_{meth}_{num_bins}.indices_up/"
        odir=directory("{prefix}.mapmap_{meth}_{num_bins}.indices_up/")
    params:
        idir="{prefix}_{meth}_{num_bins}_up/",
        misc=config["dindexers"]["mapmap"]
    shell:
#        "command time -f 'RES:%e\\t%M\\t%P' "
        "./bin/dream_yara_indexer {params.misc} --output-prefix {output.odir} {params.idir}/*.fasta &> {output.log}; "


rule mapmap_index_ibf:
    input:
        "{prefix}_{meth}_{num_bins}/ref_{num_bins}"
    output:
        "{prefix}.mapmap_{meth}_{num_bins}.filter"
    wildcard_constraints:
        num_bins="\d+."
    params:
        num_bins="{num_bins}",
        idir="{prefix}_{meth}_{num_bins}/",
        misc=config["ibf_indexers"]["mapmap"]
#        misc=lambda wildcards: config["ibf_indexers"][wildcards.indexer]
    log:
        "{prefix}.mapmap_{meth}_{num_bins}.ibf.log",
    shell:
#        "command time -f 'RES:%e\\t%M\\t%P' "
        "./bin/dream_yara_build_filter --number-of-bins {params.num_bins} {params.misc} --output-file {output} {params.idir} 2> {log};"

rule mapmap_index_fm:
    input:
        "{prefix}_{meth}_{num_bins}/ref_{num_bins}"
    output:
        log="{prefix}.mapmap_{meth}_{num_bins}.index.log",
        odir=directory("{prefix}.mapmap_{meth}_{num_bins}.indices/")
#        odir="{prefix}.mapmap_{meth}_{num_bins}.indices/"
    params:
        idir="{prefix}_{meth}_{num_bins}/",
        misc=config["dindexers"]["mapmap"]
    shell:
#        "command time -f 'RES:%e\\t%M\\t%P' "
        "./bin/dream_yara_indexer {params.misc} --output-prefix {output.odir} {params.idir}/*.fasta &> {output.log}; "



rule mapmap_map_se:
    input:
        ibf="{prefix}/{reference}.mapmap_{meth}_{num_bins}.filter",
        index="{prefix}/{reference}.mapmap_{meth}_{num_bins}.index.log",
        read="{prefix}/{reads}.fastq"
    wildcard_constraints:
        config="[a-zA-Z0-9_]+"
    output:
        "{prefix}/{reads}.{reference}.mapmap_{config}_{meth}_{num_bins}.bam"
    log:
        "{prefix}/{reads}.{reference}.mapmap_{config}_{meth}_{num_bins}.bam.log"
    benchmark:
        "{prefix}/{reads}.{reference}.mapmap_{config}_{meth}_{num_bins}.bam.bench"
    params:
        num_bins="{num_bins}",
        idir="{prefix}/{reference}.mapmap_{meth}_{num_bins}.indices/",
        misc=lambda wildcards: config["dmappers"]["mapmap_" + wildcards.config]
    shell:
#        "command time -f 'RES:%e\\t%M\\t%P' "
        "./bin/dream_yara_mapper {params.misc} --output-file {output} --bloom-filter {input.ibf} -b {params.num_bins} {params.idir} {input.read} 2> {log} > {log}; "
